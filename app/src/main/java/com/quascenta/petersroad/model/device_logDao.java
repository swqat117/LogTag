package com.quascenta.petersroad.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DEVICE_LOG.
*/
public class device_logDao extends AbstractDao<device_log, Void> {

    public static final String TABLENAME = "DEVICE_LOG";

    /**
     * Properties of entity device_log.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Data_id = new Property(0, String.class, "data_id", false, "DATA_ID");
        public final static Property Config_id = new Property(1, String.class, "config_id", false, "CONFIG_ID");
        public final static Property Datetime = new Property(2, String.class, "datetime", false, "DATETIME");
        public final static Property Sen1 = new Property(3, String.class, "sen1", false, "SEN1");
        public final static Property Sen2 = new Property(4, String.class, "sen2", false, "SEN2");
        public final static Property Sen3 = new Property(5, String.class, "sen3", false, "SEN3");
        public final static Property Sen4 = new Property(6, String.class, "sen4", false, "SEN4");
        public final static Property Sen5 = new Property(7, String.class, "sen5", false, "SEN5");
        public final static Property Sen6 = new Property(8, String.class, "sen6", false, "SEN6");
        public final static Property Sen7 = new Property(9, String.class, "sen7", false, "SEN7");
        public final static Property Sen8 = new Property(10, String.class, "sen8", false, "SEN8");
    };


    public device_logDao(DaoConfig config) {
        super(config);
    }
    
    public device_logDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DEVICE_LOG' (" + //
                "'DATA_ID' TEXT," + // 0: data_id
                "'CONFIG_ID' TEXT," + // 1: config_id
                "'DATETIME' TEXT," + // 2: datetime
                "'SEN1' TEXT," + // 3: sen1
                "'SEN2' TEXT," + // 4: sen2
                "'SEN3' TEXT," + // 5: sen3
                "'SEN4' TEXT," + // 6: sen4
                "'SEN5' TEXT," + // 7: sen5
                "'SEN6' TEXT," + // 8: sen6
                "'SEN7' TEXT," + // 9: sen7
                "'SEN8' TEXT);"); // 10: sen8
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DEVICE_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, device_log entity) {
        stmt.clearBindings();
 
        String data_id = entity.getData_id();
        if (data_id != null) {
            stmt.bindString(1, data_id);
        }
 
        String config_id = entity.getConfig_id();
        if (config_id != null) {
            stmt.bindString(2, config_id);
        }
 
        String datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindString(3, datetime);
        }
 
        String sen1 = entity.getSen1();
        if (sen1 != null) {
            stmt.bindString(4, sen1);
        }
 
        String sen2 = entity.getSen2();
        if (sen2 != null) {
            stmt.bindString(5, sen2);
        }
 
        String sen3 = entity.getSen3();
        if (sen3 != null) {
            stmt.bindString(6, sen3);
        }
 
        String sen4 = entity.getSen4();
        if (sen4 != null) {
            stmt.bindString(7, sen4);
        }
 
        String sen5 = entity.getSen5();
        if (sen5 != null) {
            stmt.bindString(8, sen5);
        }
 
        String sen6 = entity.getSen6();
        if (sen6 != null) {
            stmt.bindString(9, sen6);
        }
 
        String sen7 = entity.getSen7();
        if (sen7 != null) {
            stmt.bindString(10, sen7);
        }
 
        String sen8 = entity.getSen8();
        if (sen8 != null) {
            stmt.bindString(11, sen8);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public device_log readEntity(Cursor cursor, int offset) {
        device_log entity = new device_log( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // data_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // config_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // datetime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sen1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sen2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sen3
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sen4
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sen5
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sen6
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sen7
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // sen8
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, device_log entity, int offset) {
        entity.setData_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setConfig_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDatetime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSen1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSen2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSen3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSen4(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSen5(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSen6(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSen7(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSen8(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(device_log entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(device_log entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
