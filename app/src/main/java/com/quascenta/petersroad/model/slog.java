package com.quascenta.petersroad.model;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SLOG.
 */
public class slog {

    private Long id;
    private Long sl_time;
    private Float sl_value;
    private Boolean sl_active;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient slogDao myDao;

    private unit unit;
    private Long unit__resolvedKey;


    public slog() {
    }

    public slog(Long id) {
        this.id = id;
    }

    public slog(Long id, Long sl_time, Float sl_value, Boolean sl_active) {
        this.id = id;
        this.sl_time = sl_time;
        this.sl_value = sl_value;
        this.sl_active = sl_active;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSlogDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getSl_time() {
        return sl_time;
    }

    public void setSl_time(Long sl_time) {
        this.sl_time = sl_time;
    }

    public Float getSl_value() {
        return sl_value;
    }

    public void setSl_value(Float sl_value) {
        this.sl_value = sl_value;
    }

    public Boolean getSl_active() {
        return sl_active;
    }

    public void setSl_active(Boolean sl_active) {
        this.sl_active = sl_active;
    }

    /** To-one relationship, resolved on first access. */
    public unit getUnit() {
        Long __key = this.id;
        if (unit__resolvedKey == null || !unit__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            unitDao targetDao = daoSession.getUnitDao();
            unit unitNew = targetDao.load(__key);
            synchronized (this) {
                unit = unitNew;
            	unit__resolvedKey = __key;
            }
        }
        return unit;
    }

    public void setUnit(unit unit) {
        synchronized (this) {
            this.unit = unit;
            id = unit == null ? null : unit.getId();
            unit__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
