package com.quascenta.petersroad.model;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SENSORS.
 */
public class sensors {

    private Long id;
    private String sensor_name;
    private String sensor_status;
    private String sensor_alarmhigh;
    private String sensor_alarmlow;
    private String sensor_description;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient sensorsDao myDao;

    private slog slog;
    private Long slog__resolvedKey;


    public sensors() {
    }

    public sensors(Long id) {
        this.id = id;
    }

    public sensors(Long id, String sensor_name, String sensor_status, String sensor_alarmhigh, String sensor_alarmlow, String sensor_description) {
        this.id = id;
        this.sensor_name = sensor_name;
        this.sensor_status = sensor_status;
        this.sensor_alarmhigh = sensor_alarmhigh;
        this.sensor_alarmlow = sensor_alarmlow;
        this.sensor_description = sensor_description;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSensorsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSensor_name() {
        return sensor_name;
    }

    public void setSensor_name(String sensor_name) {
        this.sensor_name = sensor_name;
    }

    public String getSensor_status() {
        return sensor_status;
    }

    public void setSensor_status(String sensor_status) {
        this.sensor_status = sensor_status;
    }

    public String getSensor_alarmhigh() {
        return sensor_alarmhigh;
    }

    public void setSensor_alarmhigh(String sensor_alarmhigh) {
        this.sensor_alarmhigh = sensor_alarmhigh;
    }

    public String getSensor_alarmlow() {
        return sensor_alarmlow;
    }

    public void setSensor_alarmlow(String sensor_alarmlow) {
        this.sensor_alarmlow = sensor_alarmlow;
    }

    public String getSensor_description() {
        return sensor_description;
    }

    public void setSensor_description(String sensor_description) {
        this.sensor_description = sensor_description;
    }

    /** To-one relationship, resolved on first access. */
    public slog getSlog() {
        Long __key = this.id;
        if (slog__resolvedKey == null || !slog__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            slogDao targetDao = daoSession.getSlogDao();
            slog slogNew = targetDao.load(__key);
            synchronized (this) {
                slog = slogNew;
            	slog__resolvedKey = __key;
            }
        }
        return slog;
    }

    public void setSlog(slog slog) {
        synchronized (this) {
            this.slog = slog;
            id = slog == null ? null : slog.getId();
            slog__resolvedKey = id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
