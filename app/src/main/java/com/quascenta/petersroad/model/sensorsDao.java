package com.quascenta.petersroad.model;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SENSORS.
*/
public class sensorsDao extends AbstractDao<sensors, Long> {

    public static final String TABLENAME = "SENSORS";

    /**
     * Properties of entity sensors.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {

        public final static Property Sensor_name = new Property(0, String.class, "sensor_name", false, "SENSOR_NAME");
        public final static Property Sensor_status = new Property(1, String.class, "sensor_status", false, "SENSOR_STATUS");
        public final static Property Sensor_alarmhigh = new Property(2, String.class, "sensor_alarmhigh", false, "SENSOR_ALARMHIGH");
        public final static Property Sensor_alarmlow = new Property(3, String.class, "sensor_alarmlow", false, "SENSOR_ALARMLOW");
        public final static Property Sensor_description = new Property(4, String.class, "sensor_description", false, "SENSOR_DESCRIPTION");
        public final static Property Id = new Property(5, Long.class, "id", true, "id");
    };

    private DaoSession daoSession;

    private Query<sensors> device_SensorsListQuery;

    public sensorsDao(DaoConfig config) {
        super(config);
    }
    
    public sensorsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SENSORS' (" + //
                "'SENSOR_NAME' TEXT," + // 1: sensor_name
                "'SENSOR_STATUS' TEXT," + // 2: sensor_status
                "'SENSOR_ALARMHIGH' TEXT," + // 3: sensor_alarmhigh
                "'SENSOR_ALARMLOW' TEXT," + // 4: sensor_alarmlow
                "'SENSOR_DESCRIPTION' TEXT," + // 5: sensor_description
                "'id' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 6: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SENSORS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, sensors entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sensor_name = entity.getSensor_name();
        if (sensor_name != null) {
            stmt.bindString(2, sensor_name);
        }
 
        String sensor_status = entity.getSensor_status();
        if (sensor_status != null) {
            stmt.bindString(3, sensor_status);
        }
 
        String sensor_alarmhigh = entity.getSensor_alarmhigh();
        if (sensor_alarmhigh != null) {
            stmt.bindString(4, sensor_alarmhigh);
        }
 
        String sensor_alarmlow = entity.getSensor_alarmlow();
        if (sensor_alarmlow != null) {
            stmt.bindString(5, sensor_alarmlow);
        }
 
        String sensor_description = entity.getSensor_description();
        if (sensor_description != null) {
            stmt.bindString(6, sensor_description);
        }
    }

    @Override
    protected void attachEntity(sensors entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public sensors readEntity(Cursor cursor, int offset) {
        sensors entity = new sensors( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sensor_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sensor_status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sensor_alarmhigh
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sensor_alarmlow
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sensor_description
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, sensors entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSensor_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSensor_status(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSensor_alarmhigh(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSensor_alarmlow(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSensor_description(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(sensors entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(sensors entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "sensorsList" to-many relationship of device. */
    public List<sensors> _queryDevice_SensorsList(Long id) {
        synchronized (this) {
            if (device_SensorsListQuery == null) {
                QueryBuilder<sensors> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                device_SensorsListQuery = queryBuilder.build();
            }
        }
        Query<sensors> query = device_SensorsListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getSlogDao().getAllColumns());
            builder.append(" FROM SENSORS T");
            builder.append(" LEFT JOIN SLOG T0 ON T.'sensor_id'=T0.'slog_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected sensors loadCurrentDeep(Cursor cursor, boolean lock) {
        sensors entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        slog slog = loadCurrentOther(daoSession.getSlogDao(), cursor, offset);
        entity.setSlog(slog);

        return entity;    
    }

    public sensors loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<sensors> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<sensors> list = new ArrayList<sensors>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<sensors> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<sensors> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
